/**	Shared elements of models, groups and outcomes.

@sortkey AAC

<a href="#auto">Skip down to documentation of items defined in DP.ox</a><p>

<OL class="contents">
<LI><a href="#DP">DP static elements</a></LI>
<LI><a href="#Groups">Groups</a></LI>
<LI><a href="#ZAux">Flags, Indices, Counts and Hooks</a></LI>
<LI><a href="#Debug">Debug Output and Options</a></LI>
</OL>

<OL class="body">
<a name="DP"><LI>DP static elements</LI>

<DT>`DP` is the base class for <em>all</em> aspects of DDP models.</DT>
<DD>All variables (also known as members) of the base class are <em>static</em>, which means there is only one storage location for all objects of the class. That is, these values are shared by every object derived from `DP`.</DD>
<DD>Non-static or automatic members are only defined in the derived classes. </DD>
<DT>Different derived classes from `DP` organize the various aspects of dynamic programming.  These include:</DT>

 <h3>Items not in DP but in derived classes</h3>
    <DT>The problem itself, which is based on the derived `Bellman` class and defined in <a href="Bellman.ox.html">Bellman.ox.html</a>.</DT>
   <DD>Non-static elements of the model which must vary across points in the state space  are defined in `Bellman`. </DD>
   <DD>The endogenous state space &Theta; is stored as array `Theta` of objects of the user's problem class.  This array is a "static global
   variable" in <code>DP.ox</code>, so access to it is somewhat limited. The code is designed so that the user need not and should not access
   <code>Theta</code> directly.</DD>
 <DT>Groups of problems, which are stored in the derived `Group` class, discussed <a href="#Groups">below</a>.</DT>
 <DD>Groups keep track of different DP problems defined by `TimeInvariant` states defined in <a href="Variables.ox.html#Fixed">Variables.ox.html</a>, fixed and random effects. </DD>
 <DD>Each value of the invariants implies  a point &gamma; in the group space &Gamma;.  The group space is stored as an array `Gamma` of Group objects, a
 global static variable in DP.ox.  Direct access to `Gamma` is limited.</DD>
 <DT>Tasks: </DT>
 <DD>A `Task` is designed to iterate over objects in the overall state space and carry out specific work.  </DD>
 <DD>You can think of a task an <em>operators</em> on part of the overall state space.</DD>
 <DD>Derived tasks include </DD>
 <DL><DT>`Method`</DT> <DD>includes solution algorithms for solving the problem. including of course a given program but also solution methods, data produced by the DP.</DD>
 <DD>Methods are defined in  <a href="Methods.ox.html">Methods</a>.</DD>
 <DD>Solution methods that rely on <a href="..../FiveO/default.html">FiveO</a> are defined in the separate <a href="../Hybrids/default.html">Hybrids</a> module.</DD>
 <DT>`Data`</DT><DD>includes all aspects of storing realizations of a DP, such as simulations, predictions and external data for estimation.</DD>
 <DD>Data and its derived classes are defined in <a href="Data.ox.html">Data</a></DD>
 <DT>State Space Creation</DT>
 <DD>Different tasks are defined to set up &Theta; and &Gamma;</DD>
 <DT>Nested Tasks</DT>
 <DD>Other tasks are set up to iterate over states to compute utility, transitions, etc.</DD>
 <DD>These tasks are often created and stored as members of another task so that a nested solution algorithm is implemented.</DD>
  </DL>
  </DL>

<a name="Groups"><LI>Groups</LI></a>

<DT>A `Group` is derived from `DP` and stores key aspects of the solution to the model that will be used for prediction and estimation.  A group is defined a value of &gamma;</DT>

<DT>Elements of the group vector &gamma; must be derived from the `TimeInvariant` class of state variables.  </DT>
<DD>These variables are either <em>fixed</em> or <em>random</em> effects, derived respectively from `FixedEffect` and `RandomEffect`.</DD>
<DD>`FixedEffectBlock`s can be used to represent `SubEffect`s and `RandomEffectBlock`s can be used to represent `CorrelatedEffect`s.</DD>

<DT>The user creates multiple groups by adding time-invariant variables to the model using `DP::GroupVariables`().</DT>
<DD>Create different DP programs for men and women<pre>
    enum{male,female,Ngender}
    Initialize(...);
    ...
    GroupVariables(g = new FixedEffect("sex",Ngender);
    ...
    CreateSpaces(...);
</pre></DD>

The set of all distinct groups is the group space, denoted &Gamma;.

The group space is kept separate from the state space <b>&Theta;</b> in order to economize on storage.  Only results that need to be held for later used are stored in &Gamma; and the state space is reused for each solution of the problem.

<a name="ZAux"><LI>Flags, Indices, Counts, Spaces and Hooks</LI></a>

<DT>Flags : `Flags`</DT>
<DD>Flags are 0/1 indicators of different states.  They are stored as static members of the `Flags` structure</DD>
<DD>The user can access the flag values but should not change them directly.</DD>
<DD>To set flags that the user can set, see the DP methods cross-listed under `Flags`</DD>
<DD>Ox and <span class="n">niqlow</span> both use <code>TRUE</code> and <code>FALSE</code> as aliases for the integer values 0 and 1.</DD>
<DT>Indices : `I`</DT>
<DD>Indices are integer values that track current indices into the various state spaces stored in `I`.</DD>
<DT>Counts: `N`</DT>
<DD>Counts are dimensions of the problem stored as static elements of the `N`</DD>
<DT>Spaces and Subspaces</DT>
<DT>Hooks: `Hooks`</DT>

<a name="Debug"><LI>Debug Output and Options</LI></a>

The `DPDebug` class is the base for output routines and other tasks that are related to debugging and reporting.

</OL>

<hr><a name="auto"><h1>Documentation of  Items Defined in DP.ox</h1></a>

**/
