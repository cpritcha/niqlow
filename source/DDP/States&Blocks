/** Explanation of Exogenous, Endogenous, Autonomous and Coevolving.

<h2>Example</h2>
Consider a problem with an action <var>a</var> and 3 state variables <var>s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub></var>.

<h2>Autonomous States</h2>

We will first discuss the case in which the three states are <em>autonomous</em>.  That means their own transitions could depend on their own current value and the value of the action <var>a</var>.  However, the transition of an autonomous state variable is independent of the <em>transition</em> of other state variables.  The transition may, in general, depend on the current values of other state variables and the chosen action.  So in general, the general transition for a system of autonomous states is separable in this sense:
<pre><var>f(s'<sub>0</sub>, s'<sub>1</sub>, s'<sub>2</sub>;a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) = f<sub>0</sub>(s'<sub>0</sub>; a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) f<sub>1</sub>(s'<sub>1</sub>; a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) f<sub>2</sub>(s'<sub>2</sub>;a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) </var>      (1).</pre>

If s<sub>0</sub> is <em>exogenous</em> (fully or semi) it means that its transition simplifies further so that at every state can be written:
<pre><var>f<sub>0</sub>(s'<sub>0</sub>; a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) = f<sub>0*</sub>(s'<sub>0</sub>)      (2) </pre>
This says that the evolution of the exogenous variable is not influenced by the current state or action, including its own current value s<sub>0</sub>.  However, according to (1) an exogenous variable's current value may affect the transition of other states.   Suppose that s<sub>0</sub> is fully exogenous, then it means that in addition to (2) the transition of the other states are independent of s<sub>0</sub>:
<pre><var>
f<sub>1</sub>(s'<sub>1</sub>;a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) = f<sub>1*</sub>(s'<sub>1</sub>;a,s<sub>1</sub>, s<sub>2</sub>)        (3.1)
f<sub>2</sub>(s'<sub>2</sub>;a,s<sub>0</sub>, s<sub>1</sub>, s<sub>2</sub>) = f<sub>2*</sub>(s'<sub>2</sub>;a,s<sub>1</sub>, s<sub>2</sub>)        (3.2)</var></pre>

Otherwise, if the next state s<sub>1</sub> is exogenous but not fully, it is semi-exogenous.  In that case (2) applies but the restrictions in (3) do not. Finally, if s<sub>2</sub> is not exogenous it is <em>endogenous</em>.  Thus its distribution may depend on its own value, the action and the semi-endogenous state s<sub>1</sub>.

<dd class="example"><pre> We can capture the structure in (2) and (3) in the notation:
   &alpha; = (a)
   &epsilon; = (s<sub>0</sub>,s<sub>1</sub>)
   &theta; = (s<sub>2</sub>)
Further, if we suppose each variable is binary the DDP code that would capture the structure would look like:
<code>
Actions(a = new ActionVariable("a",2));
ExogenousStates(s0 = new StateVariable("exo1",2));
SemiExogenousStates(s1 = new StateVariable("exo2",2));
EndogenousStates(s2 = new StateVariable("endo",2));</code>
In an actual model you would need to use classes derived from StateVariable that handle the specific transitions.</pre>
</dd>

<h2>Exogenous Additive Errors</h2>

A special case of fully endogenous variables are state variables that are additive errors associated with each action vector:
<em>U(&alpha;;&epsilon;,&theta;) = u(&alpha;,&theta;) + &epsilon;</em>
Including a term like &epsilon; has the effect of smoothing the state-contingent choice probabilities.  (A euphemism for this smoothing is "accounting for idiosyncratic taste shocks.")  DDP is designed to handle discrete states and does not give the user a method to specify a state variable with a continuous density.

However, DDP does offer a menu of solution methods that account for the presence of continuous additive separable action errors, including extreme value, correlated normal and (uncorrelated) lognormal.    That is, DDP accounts for such errors while iterating on Bellman's equation and computing choice probabilities.

**/ 